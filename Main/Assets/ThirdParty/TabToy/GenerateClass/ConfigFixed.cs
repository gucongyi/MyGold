// Generated by github.com/davyxu/tabtoy
// Version: 2.8.5
// DO NOT EDIT!! 这个是自动生成的数据类
using System.Collections.Generic;

namespace Company.Cfg
{
	
	// Defined in table: Base
	public enum Object
	{
		
		
		Bone = 0, // 骨头
		
		
		Mouse1 = 1, // 普通老鼠
		
		
		Mouse2 = 2, // 钻石老鼠
		
		
		Mouse3 = 3, // 绿宝石老鼠
		
		
		Mouse4 = 4, // 红宝石老鼠
		
		
		Mouse5 = 5, // 黄金老鼠
		
		
		DGreen = 6, // 绿宝石
		
		
		DollarBag = 7, // 钱袋
		
		
		DPink = 8, // 红宝石
		
		
		DViolet = 9, // 紫宝石
		
		
		DYellow = 10, // 黄宝石
		
		
		GiftBag = 11, // 随机礼包
		
		
		GoldL = 12, // 黄金大
		
		
		GoldM = 13, // 黄金中
		
		
		GoldS = 14, // 黄金小
		
		
		SkullCap = 15, // 骷髅头
		
		
		StoneL = 16, // 石头大
		
		
		StoneM = 17, // 石头中
		
		
		StoneS = 18, // 石头小
		
		
		TNT = 19, // TNT
	
	}
	
	

	// Defined in table: Config
	
	[System.Serializable]public partial class Config
	{
	
		public tabtoy.Logger TableLogger = new tabtoy.Logger();
	
		
		/// <summary> 
		/// Level
		/// </summary>
		public List<LevelDefine> Level = new List<LevelDefine>(); 
	
	
		#region Index code
	 	Dictionary<int, LevelDefine> _LevelByID = new Dictionary<int, LevelDefine>();
        public LevelDefine GetLevelByID(int ID, LevelDefine def = default(LevelDefine))
        {
            LevelDefine ret;
            if ( _LevelByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(LevelDefine) )
			{
				TableLogger.ErrorLine("GetLevelByID failed, ID: {0}", ID);
			}

            return def;
        }
		
	
		#endregion
		#region Deserialize code
		
		static tabtoy.DeserializeHandler<Config> ConfigDeserializeHandler = new tabtoy.DeserializeHandler<Config>(Deserialize);
		public static void Deserialize( Config ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0xa0000:
                	{
						ins.Level.Add( reader.ReadStruct<LevelDefine>(LevelDefineDeserializeHandler) );
                	}
                	break; 
                }
             }

			
			// Build Level Index
			for( int i = 0;i< ins.Level.Count;i++)
			{
				var element = ins.Level[i];
				
				ins._LevelByID.Add(element.ID, element);
				
			}
			
		}
		static tabtoy.DeserializeHandler<Pos> PosDeserializeHandler = new tabtoy.DeserializeHandler<Pos>(Deserialize);
		public static void Deserialize( Pos ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x80000:
                	{
						ins.Obj = (Object)reader.ReadInt32();
                	}
                	break; 
                	case 0x50001:
                	{
						ins.X = reader.ReadFloat();
                	}
                	break; 
                	case 0x50002:
                	{
						ins.Y = reader.ReadFloat();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<LevelDefine> LevelDefineDeserializeHandler = new tabtoy.DeserializeHandler<LevelDefine>(Deserialize);
		public static void Deserialize( LevelDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.Time = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.TargetScore = reader.ReadInt32();
                	}
                	break; 
                	case 0x60003:
                	{
						ins.BGM = reader.ReadString();
                	}
                	break; 
                	case 0x60004:
                	{
						ins.PersonBg = reader.ReadString();
                	}
                	break; 
                	case 0x60005:
                	{
						ins.MapBg = reader.ReadString();
                	}
                	break; 
                	case 0x60006:
                	{
						ins.TotalValue = reader.ReadString();
                	}
                	break; 
                	case 0x60007:
                	{
						ins.Topic = reader.ReadString();
                	}
                	break; 
                	case 0x90008:
                	{
						ins.ObjPos.Add( reader.ReadStruct<Pos>(PosDeserializeHandler) );
                	}
                	break; 
                }
             }

			
		}
		#endregion
	

	} 

	// Defined in table: Base
	[System.Serializable]
	public partial class Pos
	{
	
		
		
		public Object Obj = Object.Bone; // 对象
		
		
		public float X = 0f; // X
		
		
		public float Y = 0f; // Y
	
	

	} 

	// Defined in table: Level
	[System.Serializable]
	public partial class LevelDefine
	{
	
		
		/// <summary> 
		/// 字段ID
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// 关卡时间（秒）
		/// </summary>
		public int Time = 0; 
		
		/// <summary> 
		/// 目标分数
		/// </summary>
		public int TargetScore = 0; 
		
		/// <summary> 
		/// 背景音乐
		/// </summary>
		public string BGM = ""; 
		
		/// <summary> 
		/// 人物背景
		/// </summary>
		public string PersonBg = ""; 
		
		/// <summary> 
		/// 地图背景
		/// </summary>
		public string MapBg = ""; 
		
		/// <summary> 
		/// 总价值
		/// </summary>
		public string TotalValue = ""; 
		
		/// <summary> 
		/// 主题
		/// </summary>
		public string Topic = ""; 
		
		/// <summary> 
		/// 对象位置
		/// </summary>
		public List<Pos> ObjPos = new List<Pos>(); 
	
	

	} 

}
